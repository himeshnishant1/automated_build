plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dev.flutter.flutter-gradle-plugin'
}

def getPubspecField(String field) {
    def pubspec = rootProject.file('../pubspec.yaml')
    def pattern = ~/(?m)^\s*${field}:\s*(\S+)/
    def matcher = pubspec.text =~ pattern
    return matcher ? matcher[0][1]: ''
}

def parseFlavorsFromPubspec() {
    def pubspec = rootProject.file('../pubspec.yaml').text
    def flavorPattern = ~/flavors:\s*((?:\n\s+[a-z]+:\s*(?:\n\s+.+:\s*.+)+)+)/
    def match = pubspec =~ flavorPattern

    def flavors = [:]
    def defaultFlavor = null

    pubspec.eachLine { line ->
        if (line.trim().startsWith("defaultEnv:")) {
            defaultFlavor = line.trim().split(":")[1].trim()
        }
    }

    if (match) {
        def raw = match[0][1]
        def currentFlavor
        raw.eachLine { line ->
            def trimmed = line.trim()
            if (trimmed.endsWith(":") && !trimmed.contains(": ")) {
                currentFlavor = trimmed.replace(":", "")
                flavors[currentFlavor] = [:]
            } else if (currentFlavor && trimmed.contains(": ")) {
                def (k, v) = trimmed.split(": ").collect { it.trim() }
                flavors[currentFlavor][k] = v.replaceAll("'", "").replaceAll('"', '')
            }
        }
    }

    return [flavors: flavors, defaultFlavor: defaultFlavor]
}

def result = parseFlavorsFromPubspec()
def yamlFlavors = result.flavors
def activeFlavor = result.defaultFlavor ?: 'prod'
println("Flavor ${activeFlavor}");

android {namespace "com.example.whiteLabel"
    compileSdk 34
    ndkVersion '25.1.8937393'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    defaultConfig {
        applicationId 'com.example.whiteLabel'
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutter.versionCode
        versionName flutter.versionName
    }

    flavorDimensions "environment"

//    productFlavors {
//        yamlFlavors.each { flavorName, config ->
//            create(flavorName) {
//                dimension "environment"
//                if (config.applicationIdSuffix) {
//                    applicationIdSuffix config.applicationIdSuffix
//                }
//                if (config.versionNameSuffix) {
//                    versionNameSuffix config.versionNameSuffix
//                }
//            }
//        }
//    }

    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file("key.properties")
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName = getPubspecField('name')
            def versionFull = getPubspecField('version')
            def versionParts = versionFull.tokenize('+')
            def version = versionParts[0]
            def buildNumber = versionParts.size() > 1 ? versionParts[1] : '0'

            def flavor = activeFlavor ?: 'prod'
            def flavorSuffix = (flavor == 'prod') ? '' : "_${flavor}"
            def fileType = output.outputFileName.endsWith('.aab') ? '.aab' : '.apk'

            def newFileName = "${appName}_${version}_${buildNumber}${flavorSuffix}${fileType}"
            output.outputFileName = newFileName

            variant.assembleProvider.get().doLast {
                def outputDir = "${buildDir}/outputs/apk/${flavor}/${variant.buildType.name}"
                def originalFile = file("${buildDir}/outputs/${fileType == '.apk' ? 'apk' : 'bundle'}/${variant.flavorName}/${variant.buildType.name}/${output.outputFileName}")
                def destinationFile = file("${outputDir}/${newFileName}")

                file(outputDir).mkdirs()
                originalFile.renameTo(destinationFile)
            }
        }
    }

}

flutter {
    source '../..'
}
